package seedergenerator

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"
)

// FuncArg Describes a function argument
type FuncArg struct {
	Name string
	Type string
}

// Seeder describes what is needed to seed a domain entity
type Seeder struct {
	Name     string
	SQL      string
	FuncArgs []FuncArg
}

var t = `// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package {{ .PackageName }};

import (
	"database/sql"
	"github.com/dwethmar/atami/pkg/database"
	{{ range .Imports }}
	"{{ . }}"
	{{ end }}
)

{{ range .Seeders }}
// {{ .Name }}SQL seed query
var {{ .Name }}SQL = ` + "`" + `{{ .SQL }}` + "`" + `

func Seed{{.Name | Title}}(
	db database.Transaction,
	{{ JoinFuncArgs .FuncArgs -}}
) (sql.Result, error) {
	return db.Exec(
		{{ .Name }}SQL,
		{{ JoinQueryArgs .FuncArgs }}
	)
}
{{ end }}
`

// JoinFuncArgs renders list of arguments
func JoinFuncArgs(attrs []FuncArg) string {
	if len(attrs) == 0 {
		return ""
	}
	joinedAttrs := []string{}
	for _, a := range attrs {
		joinedAttrs = append(joinedAttrs, fmt.Sprintf("%s %s", a.Name, a.Type))
	}
	return strings.Join(joinedAttrs, ",\n") + ",\n"
}

// JoinQueryArgs nice
func JoinQueryArgs(attrs []FuncArg) string {
	if len(attrs) == 0 {
		return ""
	}
	keys := make([]string, 0, len(attrs))
	for _, k := range attrs {
		keys = append(keys, k.Name)
	}
	return strings.Join(keys, ",\n") + ",\n"
}

var packageTemplate = template.Must(
	template.New("").
		Funcs(template.FuncMap{
			"Title":         strings.Title,
			"JoinFuncArgs":  JoinFuncArgs,
			"JoinQueryArgs": JoinQueryArgs,
		}).
		Parse(t),
)

// Generate queries to file
func Generate(fileOut string, packageName string, imports []string, seeders []*Seeder) {
	f, err := os.Create(fileOut)
	die(err)
	defer f.Close()

	var buf bytes.Buffer
	packageTemplate.Execute(&buf, struct {
		PackageName string
		Imports     []string
		Seeders     []*Seeder
	}{
		PackageName: packageName,
		Imports:     imports,
		Seeders:     seeders,
	})
	p, err := format.Source(buf.Bytes())
	die(err)
	f.Write(p)
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
