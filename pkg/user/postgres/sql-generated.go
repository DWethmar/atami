// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package postgres

import (
	"database/sql"

	"time"
)

// selectUsernameUniqueCheck sql query
var selectUsernameUniqueCheck = `SELECT
	1
FROM public.users
WHERE username = $1
LIMIT 1`

func queryRowSelectUsernameUniqueCheck(
	db *sql.DB,
	username string,
) *sql.Row {
	return db.QueryRow(
		selectUsernameUniqueCheck,
		username,
	)
}

// selectEmailUniqueCheck sql query
var selectEmailUniqueCheck = `SELECT
	1
FROM public.users
WHERE email = $1
LIMIT 1`

func queryRowSelectEmailUniqueCheck(
	db *sql.DB,
	email string,
) *sql.Row {
	return db.QueryRow(
		selectEmailUniqueCheck,
		email,
	)
}

// insertUser sql query
var insertUser = `INSERT INTO public.users
(
	uid,
	username,
	email,
	password,
	created_at,
	updated_at
)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
)
RETURNING id`

func queryRowInsertUser(
	db *sql.DB,
	UID string,
	username string,
	email string,
	password string,
	createdAt time.Time,
	updateddAt time.Time,
) *sql.Row {
	return db.QueryRow(
		insertUser,
		UID,
		username,
		email,
		password,
		createdAt,
		updateddAt,
	)
}

// deleteUser sql query
var deleteUser = `DELETE FROM public.users
WHERE id = $1`

func execDeleteUser(
	db *sql.DB,
	ID int,
) (sql.Result, error) {
	return db.Exec(
		deleteUser,
		ID,
	)
}

// selectUsers sql query
var selectUsers = `SELECT
	users.id,
	users.uid,
	users.username,
	users.email,
	users.created_at,
	users.updated_at
FROM public.users
ORDER BY created_at ASC
LIMIT $1
OFFSET $2`

func querySelectUsers(
	db *sql.DB,
	limit int,
	offset int,
) (*sql.Rows, error) {
	return db.Query(
		selectUsers,
		limit,
		offset,
	)
}

// selectUserByID sql query
var selectUserByID = `SELECT
	users.id,
	users.uid,
	users.username,
	users.email,
	users.created_at,
	users.updated_at
FROM public.users
WHERE id = $1
LIMIT 1`

func querySelectUserByID(
	db *sql.DB,
	ID int,
) (*sql.Rows, error) {
	return db.Query(
		selectUserByID,
		ID,
	)
}

// selectUserByUID sql query
var selectUserByUID = `SELECT
	users.id,
	users.uid,
	users.username,
	users.email,
	users.created_at,
	users.updated_at
FROM public.users
WHERE uid = $1
LIMIT 1`

func querySelectUserByUID(
	db *sql.DB,
	UID string,
) (*sql.Rows, error) {
	return db.Query(
		selectUserByUID,
		UID,
	)
}

// selectUserByEmail sql query
var selectUserByEmail = `SELECT
	users.id,
	users.uid,
	users.username,
	users.email,
	users.created_at,
	users.updated_at
FROM public.users
WHERE email = $1
LIMIT 1`

func querySelectUserByEmail(
	db *sql.DB,
	email string,
) (*sql.Rows, error) {
	return db.Query(
		selectUserByEmail,
		email,
	)
}

// selectUserByEmailWithPassword sql query
var selectUserByEmailWithPassword = `SELECT
	users.id,
	users.uid,
	users.username,
	users.email,
	users.created_at,
	users.updated_at,
	password
FROM public.users
WHERE email = $1
LIMIT 1`

func querySelectUserByEmailWithPassword(
	db *sql.DB,
	email string,
) (*sql.Rows, error) {
	return db.Query(
		selectUserByEmailWithPassword,
		email,
	)
}

// selectUserByUsername sql query
var selectUserByUsername = `SELECT
	users.id,
	users.uid,
	users.username,
	users.email,
	users.created_at,
	users.updated_at
FROM public.users
WHERE username = $1
LIMIT 1`

func querySelectUserByUsername(
	db *sql.DB,
	username string,
) (*sql.Rows, error) {
	return db.Query(
		selectUserByUsername,
		username,
	)
}
