// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates contributors.go. It can be invoked by running
// go generate
package main

import (
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	qb "github.com/dwethmar/atami/pkg/database/querybuilder"
	"github.com/dwethmar/atami/pkg/user/postgres/schema"
)

var queries = []struct {
	Name  string
	Query string
}{
	{
		"selectUsernameUniqueCheck",
		qb.Select(
			qb.SelectQuery{
				From:  schema.Table,
				Cols:  []string{"1"},
				Where: qb.NewWhere().And(fmt.Sprintf("%s = $1", schema.ColUsername)),
				Limit: 1,
			},
		),
	},
	{
		"selectEmailUniqueCheck",
		qb.Select(
			qb.SelectQuery{
				From:  schema.Table,
				Cols:  []string{"1"},
				Where: qb.NewWhere().And(fmt.Sprintf("%s = $1", schema.ColEmail)),
				Limit: 1,
			},
		),
	},
	{
		"insertUser",
		qb.Insert(
			qb.InsertQuery{
				Into: schema.Table,
				Cols: []string{
					schema.ColUID,
					schema.ColUsername,
					schema.ColEmail,
					schema.ColPassword,
					schema.ColCreatedAt,
					schema.ColUpdatedAt,
				},
				Values: []interface{}{
					"$1", "$2", "$3", "$4", "$5", "$6",
				},
				Returning: []string{schema.ColID},
			},
		),
	},
	{
		"deleteUser",
		qb.Delete(
			qb.DeleteQuery{
				From: schema.Table,
				Where: qb.NewWhere().And(
					fmt.Sprintf("%s = $1", schema.ColID),
				)},
		),
	},
	{
		"selectUsers",
		qb.Select(
			qb.SelectQuery{
				From:    schema.Table,
				Cols:    schema.SelectCols,
				OrderBy: []string{"created_at ASC"},
			},
		),
	},
	{
		"selectUserByID",
		qb.Select(
			qb.SelectQuery{
				From: schema.Table,
				Cols: schema.SelectCols,
				Where: qb.NewWhere().And(
					fmt.Sprintf("%s = $1", schema.ColID),
				),
				Limit: 1,
			},
		),
	},
	{
		"selectUserByUID",
		qb.Select(
			qb.SelectQuery{
				From: schema.Table,
				Cols: schema.SelectCols,
				Where: qb.NewWhere().And(
					fmt.Sprintf("%s = $1", schema.ColUID),
				),
				Limit: 1,
			},
		),
	},
	{
		"selectUserByEmail",
		qb.Select(
			qb.SelectQuery{
				From: schema.Table,
				Cols: schema.SelectCols,
				Where: qb.NewWhere().And(
					fmt.Sprintf("%s = $1", schema.ColEmail),
				),
				Limit: 1,
			},
		),
	},
	{
		"selectUserByEmailWithPassword",
		qb.Select(
			qb.SelectQuery{
				From: schema.Table,
				Cols: append(
					schema.SelectCols,
					fmt.Sprintf("user.%s", schema.ColPassword),
				),
				Where: qb.NewWhere().And(
					fmt.Sprintf("%s = $1", schema.ColEmail),
				),
				Limit: 1,
			},
		),
	},
	{
		"selectUserByUsername",
		qb.Select(
			qb.SelectQuery{
				From: schema.Table,
				Cols: schema.SelectCols,
				Where: qb.NewWhere().And(
					fmt.Sprintf("%s = $1", schema.ColUsername),
				),
				Limit: 1,
			},
		),
	},
}

func main() {
	f, err := os.Create("sql.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Queries   []struct {
			Name  string
			Query string
		}
	}{
		Timestamp: time.Now(),
		Queries:   queries,
	})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package postgres
{{ range .Queries }}
// {{ .Name }} sql query
var {{ .Name }} = ` + "`" + `{{ .Query }}` + "`" + `
{{ end }}`))
