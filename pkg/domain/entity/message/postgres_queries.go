// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package message

import (
	"database/sql"
	"github.com/dwethmar/atami/pkg/database"

	"time"

	"github.com/dwethmar/atami/pkg/domain/entity"
)

// Row needs to be implemented in the the map function.
type Row interface {
	Scan(dest ...interface{}) error
	Err() error
}

// selectMessages sql query
var selectMessages = `SELECT
	message.id,
	message.uid,
	message.text,
	message.created_by_user_id,
	message.created_at,
	app_user.id,
	app_user.uid,
	app_user.username
FROM message
LEFT JOIN app_user ON message.created_by_user_id = app_user.id
ORDER BY message.created_at DESC
LIMIT $1
OFFSET $2`

func mapSelectMessages(row Row) (*Message, error) {
	return mapMessageWithUser(row)
}

func querySelectMessages(
	db database.Transaction,
	limit uint,
	offset uint,
) ([]*Message, error) {
	rows, err := db.Query(
		selectMessages,
		limit,
		offset,
	)
	defer rows.Close()
	if err != nil {
		return nil, err
	}
	entries := make([]*Message, 0)
	for rows.Next() {
		if entry, err := mapSelectMessages(rows); err == nil {
			entries = append(entries, entry)
		} else {
			return nil, err
		}
	}
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return entries, nil
}

// selectMessageByID sql query
var selectMessageByID = `SELECT
	message.id,
	message.uid,
	message.text,
	message.created_by_user_id,
	message.created_at,
	app_user.id,
	app_user.uid,
	app_user.username
FROM message
LEFT JOIN app_user ON message.created_by_user_id = app_user.id
WHERE message.id = $1`

func mapSelectMessageByID(row Row) (*Message, error) {
	return mapMessageWithUser(row)
}

func queryRowSelectMessageByID(
	db database.Transaction,
	ID int,
) (*Message, error) {
	return mapSelectMessageByID(db.QueryRow(
		selectMessageByID,
		ID,
	))
}

// selectMessageByUID sql query
var selectMessageByUID = `SELECT
	message.id,
	message.uid,
	message.text,
	message.created_by_user_id,
	message.created_at,
	app_user.id,
	app_user.uid,
	app_user.username
FROM message
LEFT JOIN app_user ON message.created_by_user_id = app_user.id
WHERE message.uid = $1`

func mapSelectMessageByUID(row Row) (*Message, error) {
	return mapMessageWithUser(row)
}

func queryRowSelectMessageByUID(
	db database.Transaction,
	UID string,
) (*Message, error) {
	return mapSelectMessageByUID(db.QueryRow(
		selectMessageByUID,
		UID,
	))
}

// deleteMessage sql query
var deleteMessage = `DELETE FROM message
WHERE message.id = $1`

func execDeleteMessage(
	db database.Transaction,
	ID int,
) (sql.Result, error) {
	return db.Exec(
		deleteMessage,
		ID,
	)
}

// insertMessage sql query
var insertMessage = `INSERT INTO message
(
	uid,
	text,
	created_by_user_id,
	created_at
)
VALUES (
	$1,
	$2,
	$3,
	$4
)
RETURNING id`

func mapInsertMessage(row Row) (entity.ID, error) {
	return insertMap(row)
}

func queryRowInsertMessage(
	db database.Transaction,
	UID string,
	text string,
	CreatedByUserID int,
	createdAt time.Time,
) (entity.ID, error) {
	return mapInsertMessage(db.QueryRow(
		insertMessage,
		UID,
		text,
		CreatedByUserID,
		createdAt,
	))
}
