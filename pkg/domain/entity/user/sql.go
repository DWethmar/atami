// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package user

import (
	"database/sql"
	"github.com/dwethmar/atami/pkg/database"

	"time"

	"github.com/dwethmar/atami/pkg/domain/entity"
)

// Row needs to be implemented in the the map function.
type Row interface {
	Scan(dest ...interface{}) error
	Err() error
}

// insertUser sql query
var insertUserSQL = `INSERT INTO app_user
(
	uid,
	username,
	biography,
	email,
	password,
	created_at,
	updated_at
)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7
)
RETURNING app_user.id, app_user.uid, app_user.username, app_user.email, app_user.biography, app_user.created_at, app_user.updated_at`

func queryRowInsertUser(
	db database.Transaction,
	UID string,
	username string,
	biography string,
	email string,
	password string,
	createdAt time.Time,
	updatedAt time.Time,
) (*User, error) {
	return defaultMap(db.QueryRow(
		insertUserSQL,
		UID,
		username,
		biography,
		email,
		password,
		createdAt,
		updatedAt,
	))
}

// deleteUser sql query
var deleteUserSQL = `DELETE FROM app_user
WHERE app_user.id = $1`

func execDeleteUser(
	db database.Transaction,
	ID entity.ID,
) (sql.Result, error) {
	return db.Exec(
		deleteUserSQL,
		ID,
	)
}

// selectUsers sql query
var selectUsersSQL = `SELECT
	app_user.id,
	app_user.uid,
	app_user.username,
	app_user.email,
	app_user.biography,
	app_user.created_at,
	app_user.updated_at
FROM app_user
ORDER BY app_user.created_at DESC
LIMIT $1
OFFSET $2`

func querySelectUsers(
	db database.Transaction,
	limit uint,
	offset uint,
) ([]*User, error) {
	rows, err := db.Query(
		selectUsersSQL,
		limit,
		offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	entries := make([]*User, 0)
	for rows.Next() {
		if entry, err := defaultMap(rows); err == nil {
			entries = append(entries, entry)
		} else {
			return nil, err
		}
	}
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return entries, nil
}

// selectUserByID sql query
var selectUserByIDSQL = `SELECT
	app_user.id,
	app_user.uid,
	app_user.username,
	app_user.email,
	app_user.biography,
	app_user.created_at,
	app_user.updated_at
FROM app_user
WHERE app_user.id = $1
LIMIT 1`

func queryRowSelectUserByID(
	db database.Transaction,
	ID entity.ID,
) (*User, error) {
	return defaultMap(db.QueryRow(
		selectUserByIDSQL,
		ID,
	))
}

// selectUserByUID sql query
var selectUserByUIDSQL = `SELECT
	app_user.id,
	app_user.uid,
	app_user.username,
	app_user.email,
	app_user.biography,
	app_user.created_at,
	app_user.updated_at
FROM app_user
WHERE app_user.uid = $1
LIMIT 1`

func queryRowSelectUserByUID(
	db database.Transaction,
	UID entity.UID,
) (*User, error) {
	return defaultMap(db.QueryRow(
		selectUserByUIDSQL,
		UID,
	))
}

// selectUserByEmail sql query
var selectUserByEmailSQL = `SELECT
	app_user.id,
	app_user.uid,
	app_user.username,
	app_user.email,
	app_user.biography,
	app_user.created_at,
	app_user.updated_at
FROM app_user
WHERE app_user.email = $1
LIMIT 1`

func queryRowSelectUserByEmail(
	db database.Transaction,
	email string,
) (*User, error) {
	return defaultMap(db.QueryRow(
		selectUserByEmailSQL,
		email,
	))
}

// selectUserCredentials sql query
var selectUserCredentialsSQL = `SELECT
	app_user.id,
	app_user.uid,
	app_user.username,
	app_user.email,
	app_user.password
FROM app_user
WHERE app_user.email = $1
LIMIT 1`

func queryRowSelectUserCredentials(
	db database.Transaction,
	email string,
) (*UserCredentials, error) {
	return mapCredentials(db.QueryRow(
		selectUserCredentialsSQL,
		email,
	))
}

// selectUserByUsername sql query
var selectUserByUsernameSQL = `SELECT
	app_user.id,
	app_user.uid,
	app_user.username,
	app_user.email,
	app_user.biography,
	app_user.created_at,
	app_user.updated_at
FROM app_user
WHERE app_user.username = $1
LIMIT 1`

func queryRowSelectUserByUsername(
	db database.Transaction,
	username string,
) (*User, error) {
	return defaultMap(db.QueryRow(
		selectUserByUsernameSQL,
		username,
	))
}

// updateUser sql query
var updateUserSQL = `UPDATE app_user
SET
	biography = $2,
	updated_at = $3
WHERE app_user.id = $1
RETURNING app_user.id, app_user.uid, app_user.username, app_user.email, app_user.biography, app_user.created_at, app_user.updated_at`

func queryRowUpdateUser(
	db database.Transaction,
	ID entity.ID,
	biography string,
	updatedAt time.Time,
) (*User, error) {
	return defaultMap(db.QueryRow(
		updateUserSQL,
		ID,
		biography,
		updatedAt,
	))
}
