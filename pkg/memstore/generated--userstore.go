// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package memstore

import (
	"strconv"
)

// UserStore stores data in memory by key and value
type UserStore struct {
	kv *KvStore
}

// All returns all entries.
func (h *UserStore) All() []User {
	r := make([]User, h.Len())

	for i, item := range h.kv.All() {
		if record, ok := item.(User); ok {
			r[i] = record
		}
	}

	return r
}

// Slice returns entries within the range.
func (h *UserStore) Slice(low, high int) []User {
	r := make([]User, h.Len())

	for i, item := range h.kv.Slice(low, high) {
		if record, ok := item.(User); ok {
			r[i] = record
		}
	}

	return r
}

// Get a single value.
func (h *UserStore) Get(ID int) (User, bool) {
	if r, ok := h.kv.Get(strconv.Itoa(ID)); ok {
		if record, ok := r.(User); ok {
			return record, true
		}
	}
	return User{}, false
}

// Put new User
func (h *UserStore) Put(ID int, value User) bool {
	return h.kv.Put(strconv.Itoa(ID), value)
}

// Delete a User
func (h *UserStore) Delete(ID int) bool {
	return h.kv.Delete(strconv.Itoa(ID))
}

// Len gets number of entries
func (h *UserStore) Len() int {
	return h.kv.Len()
}

// FromIndex gets value by index
func (h *UserStore) FromIndex(i int) (User, bool) {
	if record, ok := h.kv.FromIndex(i); ok {
		if record, ok := record.(User); ok {
			return record, true
		}
	}
	return User{}, false
}

// Sort items in memory
func (h *UserStore) Sort(less func(i, j int) bool) {
	h.kv.Sort(less)
}

// NewUserStore returns a new in memory repository for User records.
func NewUserStore() *UserStore {
	return &UserStore{
		kv: NewKvStore(),
	}
}
