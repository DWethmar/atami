// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package memstore

import (
	"fmt"
	"sort"
	"strconv"
	"sync"
)

// UserStore stores data in memory by key and value
type UserStore struct {
	kv  *KvStore
	IDs []int
	mux *sync.Mutex
}

// All returns all entries.
func (h *UserStore) All() ([]User, error) {
	entries := make([]User, h.Len())

	for i, ID := range h.IDs {
		record, ok := h.kv.Get(strconv.Itoa(ID))
		if ok {
			e, ok := record.(User)
			if ok {
				entries[i] = e
			} else {
				return nil, fmt.Errorf("entry User with id: %d could not be parsed", ID)
			}
		} else {
			return nil, fmt.Errorf("entry User with id: %d was not found in kvstore", ID)
		}
	}

	return entries, nil
}

// Slice returns entries within the range.
func (h *UserStore) Slice(low, high int) ([]User, error) {
	entries := make([]User, high-low)

	for i, ID := range h.IDs[low:high] {
		if record, ok := h.kv.Get(strconv.Itoa(ID)); ok {
			if record, ok := record.(User); ok {
				entries[i] = record
			} else {
				return nil, fmt.Errorf("entry User with id: %d could not be parsed", ID)
			}
		} else {
			return nil, fmt.Errorf("entry User with id: %d was not found in kvstore", ID)
		}
	}

	return entries, nil
}

// Get a single User.
func (h *UserStore) Get(ID int) (User, bool) {
	if record, ok := h.kv.Get(strconv.Itoa(ID)); ok {
		if record, ok := record.(User); ok {
			return record, true
		}
	}
	return User{}, false
}

// Put new User
func (h *UserStore) Put(ID int, value User) bool {
	h.IDs = append(h.IDs, ID)
	return h.kv.Put(strconv.Itoa(ID), value)
}

// Delete a User
func (h *UserStore) Delete(ID int) bool {
	ok := h.kv.Delete(strconv.Itoa(ID))

	if ok {
		for i, n := range h.IDs {
			if n == ID {
				h.IDs = append(h.IDs[:i], h.IDs[i+1:]...)
			}
		}
	}

	return ok
}

// Len gets number of entries
func (h *UserStore) Len() int {
	return len(h.IDs)
}

// FromIndex gets value by index
func (h *UserStore) FromIndex(i int) (User, bool) {
	if i >= 0 && i < h.Len() {
		entry, ok := h.Get(h.IDs[i])
		if ok {
			return entry, true
		}
	}
	return User{}, false
}

// Sort items in memory
func (h *UserStore) Sort(less func(i, j int) bool) {
	sort.SliceStable(h.IDs, less)
}

// NewUserStore returns a new in memory repository for User records.
func NewUserStore(mux *sync.Mutex) *UserStore {
	return &UserStore{
		kv:  NewKvStore(mux),
		IDs: make([]int, 0),
		mux: mux,
	}
}
