// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package memstore

import (
	"fmt"
	"sort"
	"sync"
)

type UserIDs = []int
type setUserStoreState = func(IDs UserIDs, kv *KvStore) error

func generateUserKey(ID int) string {
	return fmt.Sprintf("User_%d", ID)
}

// UserStore stores data in memory by key and value
type UserStore struct {
	kv       *KvStore
	ids      UserIDs
	readMux  *sync.Mutex
	writeMux *sync.Mutex
}

// All returns all entries.
func (h *UserStore) All() ([]User, error) {
	h.readMux.Lock()
	defer h.readMux.Unlock()

	entries := make([]User, len(h.ids))

	for i, ID := range h.ids {
		record, ok := h.kv.Get(generateUserKey(ID))
		if ok {
			e, ok := record.(User)
			if ok {
				entries[i] = e
			} else {
				return nil, fmt.Errorf("entry User with id: %d could not be parsed", ID)
			}
		} else {
			return nil, fmt.Errorf("entry User with id: %d was not found in kvstore", ID)
		}
	}

	return entries, nil
}

// Slice returns entries within the range.
func (h *UserStore) Slice(low, high int) ([]User, error) {
	h.readMux.Lock()
	defer h.readMux.Unlock()

	entries := make([]User, high-low)

	for i, ID := range h.ids[low:high] {
		if record, ok := h.kv.Get(generateUserKey(ID)); ok {
			if record, ok := record.(User); ok {
				entries[i] = record
			} else {
				return nil, fmt.Errorf("entry User with id: %d could not be parsed", ID)
			}
		} else {
			return nil, fmt.Errorf("entry User with id: %d was not found in kvstore", ID)
		}
	}

	return entries, nil
}

// Get a single User.
func (h *UserStore) Get(ID int) (User, bool) {
	h.readMux.Lock()
	defer h.readMux.Unlock()

	if record, ok := h.kv.Get(generateUserKey(ID)); ok {
		if record, ok := record.(User); ok {
			return record, true
		}
	}
	return User{}, false
}

// Get all ids.
func (h *UserStore) GetIDs() UserIDs {
	h.readMux.Lock()
	defer h.readMux.Unlock()

	return h.ids
}

// Put new User
func (h *UserStore) Put(ID int, value User) bool {
	h.writeMux.Lock()
	defer h.writeMux.Unlock()

	h.ids = append(h.ids, ID)
	return h.kv.Put(generateUserKey(ID), value)
}

// Delete a User
func (h *UserStore) Delete(ID int) bool {
	h.writeMux.Lock()
	defer h.writeMux.Unlock()

	ok := h.kv.Delete(generateUserKey(ID))

	if ok {
		for i, n := range h.ids {
			if n == ID {
				h.ids = append(h.ids[:i], h.ids[i+1:]...)
			}
		}
	}

	return ok
}

// Len gets number of entries
func (h *UserStore) Len() int {
	h.readMux.Lock()
	defer h.readMux.Unlock()

	return len(h.ids)
}

// FromIndex gets value by index
func (h *UserStore) FromIndex(i int) (User, bool) {
	h.readMux.Lock()
	defer h.readMux.Unlock()

	if i >= 0 && len(h.ids) > i {
		record, ok := h.kv.Get(generateUserKey(h.ids[i]))
		if ok {
			if user, ok := record.(User); ok {
				return user, true
			}
		}
	}
	return User{}, false
}

// Sort items in memory
func (h *UserStore) Sort(less func(i, j int) bool) {
	h.writeMux.Lock()
	defer h.writeMux.Unlock()

	sort.SliceStable(h.ids, less)
}

// NewUserStore returns a new in memory repository for User records.
func NewUserStore(kvs *KvStore, readMux *sync.Mutex, writeMux *sync.Mutex) (*UserStore, setUserStoreState) {
	store := &UserStore{
		kv:       kvs,
		ids:      make(UserIDs, 0),
		readMux:  readMux,
		writeMux: writeMux,
	}
	return store, func(IDs UserIDs, kv *KvStore) error {
		store.ids = IDs
		store.kv = kv
		return nil
	}
}
