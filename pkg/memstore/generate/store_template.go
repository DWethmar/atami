package main

var storeTemplateText = `// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package {{ .PackageName }};

import (
	"strconv"
	"sync"
	"sort"
	"fmt"
)

// {{ .Name }}Store stores data in memory by key and value
type {{ .Name }}Store struct {
	kv *KvStore
	IDs []int
	mux *sync.Mutex
}

// All returns all entries.
func (h *{{ .Name }}Store) All() ([]{{ .Name }}, error) {
	entries := make([]{{ .Name }}, h.Len())

	for i, ID := range h.IDs {
		record, ok := h.kv.Get(strconv.Itoa(ID))
		if ok {
			e, ok := record.({{ .Name }})
			if ok {
				entries[i] = e
			} else {
				return nil, fmt.Errorf("entry {{ .Name }} with id: %d could not be parsed", ID)
			}
		} else {
			return nil, fmt.Errorf("entry {{ .Name }} with id: %d was not found in kvstore", ID)
		}
	}

	return entries, nil
}

// Slice returns entries within the range.
func (h *{{ .Name }}Store) Slice(low, high int) ([]{{ .Name }}, error) {
	entries := make([]{{ .Name }}, high-low)

	for i, ID := range h.IDs[low:high] {
		if record, ok := h.kv.Get(strconv.Itoa(ID)); ok {
			if record, ok := record.({{ .Name }}); ok {
				entries[i] = record
			} else {
				return nil, fmt.Errorf("entry {{ .Name }} with id: %d could not be parsed", ID)
			}
		} else {
			return nil, fmt.Errorf("entry {{ .Name }} with id: %d was not found in kvstore", ID)
		}
	}

	return entries, nil
}

// Get a single {{ .Name }}.
func (h *{{ .Name }}Store) Get(ID int) ({{ .Name }}, bool) {
	if record, ok := h.kv.Get(strconv.Itoa(ID)); ok {
		if record, ok := record.({{ .Name }}); ok {
			return record, true
		}
	}
	return {{ .Name }}{}, false
}

// Put new {{ .Name }}
func (h *{{ .Name }}Store) Put(ID int, value {{ .Name }}) bool {
	h.IDs = append(h.IDs, ID)
	return h.kv.Put(strconv.Itoa(ID), value)
}

// Delete a {{ .Name }}
func (h *{{ .Name }}Store) Delete(ID int) bool {
	ok := h.kv.Delete(strconv.Itoa(ID))

	if ok {
		for i, n := range h.IDs {
			if n == ID {
				h.IDs = append(h.IDs[:i], h.IDs[i+1:]...)
			}
		}
	}

	return ok
}

// Len gets number of entries
func (h *{{ .Name }}Store) Len() int {
	return len(h.IDs)
}

// FromIndex gets value by index
func (h *{{ .Name }}Store) FromIndex(i int) ({{ .Name }}, bool) {
	if i >= 0 && i < h.Len() {
		entry, ok := h.Get(h.IDs[i])
		if ok {
			return entry, true
		}
	}
	return {{ .Name }}{}, false
}

// Sort items in memory
func (h *{{ .Name }}Store) Sort(less func(i, j int) bool) {
	sort.SliceStable(h.IDs, less)
}


// New{{ .Name }}Store returns a new in memory repository for {{ .Name }} records.
func New{{ .Name }}Store(mux *sync.Mutex) *{{ .Name }}Store {
	return &{{ .Name }}Store{
		kv: NewKvStore(mux),
		IDs: make([]int, 0),
		mux: mux,
	}
}
`
