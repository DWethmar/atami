// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package memstore

import (
	"strconv"
)

// NodeStore stores data in memory by key and value
type NodeStore struct {
	kv *KvStore
}

// All returns all entries.
func (h *NodeStore) All() []Node {
	r := make([]Node, h.Len())

	for i, item := range h.kv.All() {
		if record, ok := item.(Node); ok {
			r[i] = record
		}
	}

	return r
}

// Slice returns entries within the range.
func (h *NodeStore) Slice(low, high int) []Node {
	r := make([]Node, h.Len())

	for i, item := range h.kv.Slice(low, high) {
		if record, ok := item.(Node); ok {
			r[i] = record
		}
	}

	return r
}

// Get a single value.
func (h *NodeStore) Get(ID int) (Node, bool) {
	if record, ok := h.kv.Get(strconv.Itoa(ID)); ok {
		if record, ok := record.(Node); ok {
			return record, true
		}
	}
	return Node{}, false
}

// Put new Node
func (h *NodeStore) Put(ID int, value Node) bool {
	return h.kv.Put(strconv.Itoa(ID), value)
}

// Delete a Node
func (h *NodeStore) Delete(ID int) bool {
	return h.kv.Delete(strconv.Itoa(ID))
}

// Len gets number of entries
func (h *NodeStore) Len() int {
	return h.kv.Len()
}

// FromIndex gets value by index
func (h *NodeStore) FromIndex(i int) (Node, bool) {
	if record, ok := h.kv.FromIndex(i); ok {
		if record, ok := record.(Node); ok {
			return record, true
		}
	}
	return Node{}, false
}

// Sort items in memory
func (h *NodeStore) Sort(less func(i, j int) bool) {
	h.kv.Sort(less)
}

// NewNodeStore returns a new in memory repository for Node records.
func NewNodeStore() *NodeStore {
	return &NodeStore{
		kv: NewKvStore(),
	}
}
