// This file was generated by robots; DO NOT EDIT.
// run: 'make generate' to regenerate this file.

package postgres

import (
	"database/sql"

	"time"

	"github.com/dwethmar/atami/pkg/node"
)

// Row needs to be implemented in the the map function.
type Row interface {
	Scan(dest ...interface{}) error
	Err() error
}

// selectNodes sql query
var selectNodes = `SELECT
	node.id,
	node.uid,
	node.text,
	node.created_by_user_id,
	node.created_at,
	app_user.id,
	app_user.uid,
	app_user.username
FROM node
LEFT JOIN app_user ON node.created_by_user_id = app_user.id
ORDER BY node.created_at DESC
LIMIT $1
OFFSET $2`

func mapSelectNodes(row Row) (*node.Node, error) {
	return mapNodeWithUser(row)
}

func querySelectNodes(
	db *sql.DB,
	limit int,
	offset int,
) ([]*node.Node, error) {
	rows, err := db.Query(
		selectNodes,
		limit,
		offset,
	)
	defer rows.Close()
	if err != nil {
		return nil, err
	}
	entries := make([]*node.Node, 0)
	for rows.Next() {
		if entry, err := mapSelectNodes(rows); err == nil {
			entries = append(entries, entry)
		} else {
			return nil, err
		}
	}
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return entries, nil
}

// selectNodeByID sql query
var selectNodeByID = `SELECT
	node.id,
	node.uid,
	node.text,
	node.created_by_user_id,
	node.created_at,
	app_user.id,
	app_user.uid,
	app_user.username
FROM node
LEFT JOIN app_user ON node.created_by_user_id = app_user.id
WHERE node.id = $1`

func mapSelectNodeByID(row Row) (*node.Node, error) {
	return mapNodeWithUser(row)
}

func queryRowSelectNodeByID(
	db *sql.DB,
	ID int,
) (*node.Node, error) {
	return mapSelectNodeByID(db.QueryRow(
		selectNodeByID,
		ID,
	))
}

// selectNodeByUID sql query
var selectNodeByUID = `SELECT
	node.id,
	node.uid,
	node.text,
	node.created_by_user_id,
	node.created_at,
	app_user.id,
	app_user.uid,
	app_user.username
FROM node
LEFT JOIN app_user ON node.created_by_user_id = app_user.id
WHERE node.uid = $1`

func mapSelectNodeByUID(row Row) (*node.Node, error) {
	return mapNodeWithUser(row)
}

func queryRowSelectNodeByUID(
	db *sql.DB,
	UID string,
) (*node.Node, error) {
	return mapSelectNodeByUID(db.QueryRow(
		selectNodeByUID,
		UID,
	))
}

// deleteNode sql query
var deleteNode = `DELETE FROM node
WHERE node.id = $1`

func execDeleteNode(
	db *sql.DB,
	ID int,
) (sql.Result, error) {
	return db.Exec(
		deleteNode,
		ID,
	)
}

// insertNode sql query
var insertNode = `INSERT INTO node
(
	uid,
	text,
	created_by_user_id,
	created_at
)
VALUES (
	$1,
	$2,
	$3,
	$4
)
RETURNING node.id, node.uid, node.text, node.created_by_user_id, node.created_at`

func mapInsertNode(row Row) (*node.Node, error) {
	return defaultMap(row)
}

func queryRowInsertNode(
	db *sql.DB,
	UID string,
	text string,
	CreatedByUserID int,
	createdAt time.Time,
) (*node.Node, error) {
	return mapInsertNode(db.QueryRow(
		insertNode,
		UID,
		text,
		CreatedByUserID,
		createdAt,
	))
}
